{"remainingRequest":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/babel-loader/lib/index.js!/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/src/views/goTest/components/NodeConfig.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/src/views/goTest/components/NodeConfig.vue","mtime":1608186377409},{"path":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiBbJ25vZGVKc29uJ10sCiAgLy8g6L6T5YWl5qGG55qE5paH5pysCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGZyb21EYXRhOiB7fSwKICAgICAgZGlhbG9nVmlzaWJsZTogdHJ1ZSwKICAgICAgZm9udF9zaXplOiAnMTQnLAogICAgICAvLyDpu5jorqTlrZfkvZPlpKflsI8KICAgICAgY2hhbmdlTGlua0NvbG9yOiBmYWxzZSwKICAgICAgbGlua0NvbG9yOiAnIzgwODA4MCcsCiAgICAgIC8vIOm7mOiupOWFqOWxgOi/nuaOpee6v+minOiJsgogICAgICBnbG9iYWxDb25maWc6IGZhbHNlLAogICAgICBudW1MaXN0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGFyciA9IFtdOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ5OyBpKyspIHsKICAgICAgICAgIGlmIChpID49IDEyKSB7CiAgICAgICAgICAgIGFyci5wdXNoKGkpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGFycjsKICAgICAgfSgpLAogICAgICBib3JkZXJXaWR0aExpc3Q6IFsxLCAyLCAzXQogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLm5vZGVKc29uID8gdGhpcy5mcm9tRGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMubm9kZUpzb24pIDogdGhpcy5mcm9tRGF0YSA9IHt9OwoKICAgIGlmICh0aGlzLmZyb21EYXRhLnR5cGUgJiYgdGhpcy5mcm9tRGF0YS50eXBlID09PSAnZ2xvYmFsJykgewogICAgICAvLyDorr7nva7pu5jorqTlhajlsYDmoLflvI8KICAgICAgdGhpcy5nbG9iYWxDb25maWcgPSB0cnVlOwogICAgICB0aGlzLmZvbnRfc2l6ZSA9IHRoaXMuZnJvbURhdGEuZm9udDsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmICh0aGlzLmZyb21EYXRhLmZyb20gJiYgdGhpcy5mcm9tRGF0YS50bykgewogICAgICAvLyDliKTmlq3mmK/kuI3mmK/ov57nur8KICAgICAgdGhpcy5jaGFuZ2VMaW5rQ29sb3IgPSB0cnVlOwogICAgICByZXR1cm47CiAgICB9CgogICAgdGhpcy5mb250X3NpemUgPSBwYXJzZUludCh0aGlzLmZyb21EYXRhLmZvbnQuc3BsaXQoJ3B4JylbMF0pOwogIH0sCiAgbWV0aG9kczogewogICAgY2xvc2VEaWFsb2c6IGZ1bmN0aW9uIGNsb3NlRGlhbG9nKCkgewogICAgICAvLyDlhbPpl63lvLnnqpcKICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gZmFsc2U7CiAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlRGlhbG9nJyk7CiAgICB9LAogICAgb2s6IGZ1bmN0aW9uIG9rKCkgewogICAgICAvLyDnoa7lrpoKICAgICAgaWYgKHRoaXMuZ2xvYmFsQ29uZmlnKSB7CiAgICAgICAgLy8g5YWo5bGACiAgICAgICAgdmFyIGZyb21EYXRhID0gewogICAgICAgICAgY29sb3I6IHRoaXMuZnJvbURhdGEuY29sb3IsCiAgICAgICAgICBmaWxsOiB0aGlzLmZyb21EYXRhLmZpbGwsCiAgICAgICAgICBmb250OiB0aGlzLmZvbnRfc2l6ZSArICdweCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmJywKICAgICAgICAgIGJvcmRlckNvbG9yOiB0aGlzLmZyb21EYXRhLmJvcmRlckNvbG9yLAogICAgICAgICAgYm9yZGVyV2lkdGg6IHRoaXMuZnJvbURhdGEuYm9yZGVyV2lkdGgKICAgICAgICB9OwogICAgICAgIHRoaXMuJGVtaXQoJ2dsb2JhbE5vZGVDaGFuZ2UnLCBmcm9tRGF0YSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAodGhpcy5jaGFuZ2VMaW5rQ29sb3IpIHsKICAgICAgICAvLyDlpoLmnpzmmK/ov57nur/popzoibLnmoTnoa7lrpoKICAgICAgICB0aGlzLmZyb21EYXRhLmNvbG9yID0gdGhpcy5saW5rQ29sb3I7CiAgICAgICAgdGhpcy4kZW1pdCgndXBkYXRlTGluaycsIHRoaXMuZnJvbURhdGEpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuZnJvbURhdGEuY2F0ZWdvcnkgPT09ICdTdGVwJyAmJiAhdGhpcy5mcm9tRGF0YS50ZXh0KSB7CiAgICAgICAgLy8g5aaC5p6c5piv6buY6K6k6IqC54K5IOmCo+S5iHRleHTmmK/lv4XloavnmoQKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmZyb21EYXRhLmNhdGVnb3J5ID09PSAnU3ViJyAmJiAoIXRoaXMuZnJvbURhdGEudG9wVHh0IHx8ICF0aGlzLmZyb21EYXRhLmJvdHRvbVR4dCkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmZyb21EYXRhLmNhdGVnb3J5ID09PSAnTHInICYmICghdGhpcy5mcm9tRGF0YS5sZWZ0VHh0IHx8ICF0aGlzLmZyb21EYXRhLnJpZ2h0VHh0KSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5mcm9tRGF0YS5mb250ID0gdGhpcy5mb250X3NpemUgKyAncHggSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZic7CiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZU5vZGUnLCB0aGlzLmZyb21EYXRhKTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["NodeConfig.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <el-dialog\n        :title=\"changeLinkColor?'设置颜色':'配置节点'\"\n        :visible.sync=\"dialogVisible\"\n        width=\"50%\"\n        @close=\"closeDialog\">\n            <el-form \n                ref=\"form\" \n                :model=\"fromData\"\n                label-width=\"120px\"\n            >\n                <!-- 对字节的设置 -->\n                <div v-if=\"!changeLinkColor\">\n                    <!-- 默认节点类型  -->\n                    <el-form-item label=\"节点名称：\" prop=\"text\" v-if=\"fromData.category === 'Step'\">\n                        <el-input v-model=\"fromData.text\" :validate-event=\"false\"></el-input>\n                    </el-form-item>\n                    <!-- 上下节点类型 -->\n                    <div v-if=\"fromData.category === 'Sub'\">\n                        <el-form-item label=\"上节点名称：\" prop=\"text\">\n                            <el-input v-model=\"fromData.topTxt\" :validate-event=\"false\"></el-input>\n                        </el-form-item>\n                        <el-form-item label=\"下节点名称：\" prop=\"text\">\n                            <el-input v-model=\"fromData.bottomTxt\" :validate-event=\"false\"></el-input>\n                        </el-form-item>\n                    </div>\n                    <!-- 左右节点类型 -->\n                    <div v-if=\"fromData.category === 'Lr'\">\n                        <el-form-item label=\"左节点名称：\" prop=\"text\">\n                            <el-input v-model=\"fromData.leftTxt\"></el-input>\n                        </el-form-item>\n                        <el-form-item label=\"右节点名称：\" prop=\"text\">\n                            <el-input v-model=\"fromData.rightTxt\"></el-input>\n                        </el-form-item>\n                    </div>\n                    <el-form-item label=\"字体大小:\" prop=\"color\">\n                        <el-select v-model=\"font_size\" placeholder=\"请选择\">\n                            <el-option\n                                v-for=\"item in numList\"\n                                :key=\"item\"\n                                :label=\"item\"\n                                :value=\"item\">\n                            </el-option>\n                         </el-select>\n                    </el-form-item>\n                    <el-form-item label=\"字体颜色:\" prop=\"color\">\n                        <el-color-picker v-model=\"fromData.color\"></el-color-picker>\n                    </el-form-item>\n                    <el-form-item label=\"背景颜色:\" prop=\"color\">\n                        <el-color-picker v-model=\"fromData.fill\"></el-color-picker>\n                    </el-form-item>\n                    <el-form-item label=\"边框颜色:\" prop=\"color\">\n                        <el-color-picker v-model=\"fromData.borderColor\"></el-color-picker>\n                    </el-form-item>\n                    <el-form-item label=\"边框大小\" prop=\"border\">\n                        <el-select v-model=\"fromData.borderWidth\" placeholder=\"请选择\">\n                            <el-option\n                                v-for=\"item in borderWidthList\"\n                                :key=\"item\"\n                                :label=\"item\"\n                                :value=\"item\">\n                            </el-option>\n                         </el-select>\n                    </el-form-item>\n                </div>\n                <!-- 对线的设置 -->\n                <div v-else>\n                    <el-form-item label=\"连线颜色:\" prop=\"color\">\n                        <el-color-picker v-model=\"linkColor\"></el-color-picker>\n                    </el-form-item>\n                </div>\n            </el-form>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"closeDialog\">取 消</el-button>\n                <el-button type=\"primary\" @click=\"ok\">确 定</el-button>\n            </span>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\nexport default {\n    props: ['nodeJson'], // 输入框的文本\n    data() {\n        return {\n            fromData: {},\n            dialogVisible: true,\n            font_size: '14', // 默认字体大小\n            changeLinkColor: false,\n            linkColor:'#808080', // 默认全局连接线颜色\n            globalConfig: false,\n            numList:function() {\n                let arr = []\n                for(let i =0 ; i<49; i++) {\n                    if(i>=12) {\n                        arr.push(i)\n                    }\n                }\n                return arr\n            }(),\n            borderWidthList:[1,2,3]\n        }\n    },\n    created() {\n        this.nodeJson ? this.fromData = Object.assign({}, this.nodeJson) : this.fromData = {}\n        if(this.fromData.type && this.fromData.type === 'global') { // 设置默认全局样式\n            this.globalConfig = true\n            this.font_size = this.fromData.font\n            return;\n        }\n        if(this.fromData.from && this.fromData.to) { // 判断是不是连线\n            this.changeLinkColor = true\n            return;\n        }\n        this.font_size = parseInt( this.fromData.font.split('px')[0])\n    },\n    methods: {\n        closeDialog() { // 关闭弹窗\n            this.dialogVisible = false\n            this.$emit('closeDialog')\n        },\n        ok() { // 确定\n            if(this.globalConfig) { // 全局\n                let fromData = {\n                    color: this.fromData.color,\n                    fill: this.fromData.fill,\n                    font: this.font_size + 'px Helvetica, Arial, sans-serif',\n                    borderColor: this.fromData.borderColor,\n                    borderWidth: this.fromData.borderWidth\n                }\n                this.$emit('globalNodeChange', fromData)\n                return;\n            }\n            if(this.changeLinkColor) { // 如果是连线颜色的确定\n                this.fromData.color = this.linkColor\n                this.$emit('updateLink', this.fromData)\n                return;\n            }\n            if(this.fromData.category==='Step' &&  !this.fromData.text) { // 如果是默认节点 那么text是必填的\n                return;\n            }\n            if(this.fromData.category==='Sub' &&  (!this.fromData.topTxt || !this.fromData.bottomTxt)) {\n                return;\n            }\n            if(this.fromData.category==='Lr' &&  (!this.fromData.leftTxt || !this.fromData.rightTxt)) {\n                return;\n            }\n            this.fromData.font = this.font_size + 'px Helvetica, Arial, sans-serif'\n            this.$emit('updateNode', this.fromData)\n        },\n    },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>"],"sourceRoot":"src/views/goTest/components"}]}