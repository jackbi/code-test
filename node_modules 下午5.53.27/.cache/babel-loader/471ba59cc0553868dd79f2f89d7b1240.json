{"remainingRequest":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/babel-loader/lib/index.js!/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/src/views/mxgraph-text/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/src/views/mxgraph-text/index.vue","mtime":1597049582000},{"path":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangshi/Desktop/盟拓软件项目/bi-table-test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n * @Descripttion: \n * @version: \n * @Author: sueRimn\n * @Date: 2020-08-10 13:48:54\n * @LastEditors: sueRimn\n * @LastEditTime: 2020-08-10 16:53:02\n-->\n<template>\n  <div class=\"graph\">\n    <div id=\"graphIndex\" ref=\"graphIndex\"></div>\n  </div>\n</template>\n\n<script>\nimport mxgraph from '@/utils/graph';\nconst {\n  mxGraph,\n  mxClient,\n  mxUtils,\n  mxConstants,\n  mxRubberband,\n  mxConnectionConstraint,\n  mxPoint,\n  mxConnectionHandler,\n  mxConstraintHandler,\n  mxCellState,\n  mxEdgeHandler\n} = mxgraph;\nexport default {\n  components: {},\n  data() {\n    return {};\n  },\n  computed: {},\n  watch: {},\n  methods: {\n    createFraphIndex(container) {\n      // Checks if the browser is supported\n      if (!mxClient.isBrowserSupported()) {\n        // Displays an error message if the browser is not supported.\n        mxUtils.error('Browser is not supported!', 200, false);\n      } else {\n        // Snaps to fixed points\n        mxConstraintHandler.prototype.intersects = function(\n          icon,\n          point,\n          source,\n          existingEdge\n        ) {\n          return (\n            !source || existingEdge || mxUtils.intersects(icon.bounds, point)\n          );\n        };\n\n        // Special case: Snaps source of new connections to fixed points\n        // Without a connect preview in connectionHandler.createEdgeState mouseMove\n        // and getSourcePerimeterPoint should be overriden by setting sourceConstraint\n        // sourceConstraint to null in mouseMove and updating it and returning the\n        // nearest point (cp) in getSourcePerimeterPoint (see below)\n        var mxConnectionHandlerUpdateEdgeState =\n          mxConnectionHandler.prototype.updateEdgeState;\n        mxConnectionHandler.prototype.updateEdgeState = function(\n          pt,\n          constraint\n        ) {\n          if (pt != null && this.previous != null) {\n            var constraints = this.graph.getAllConnectionConstraints(\n              this.previous\n            );\n            var nearestConstraint = null;\n            var dist = null;\n\n            for (var i = 0; i < constraints.length; i++) {\n              var cp = this.graph.getConnectionPoint(\n                this.previous,\n                constraints[i]\n              );\n\n              if (cp != null) {\n                var tmp =\n                  (cp.x - pt.x) * (cp.x - pt.x) + (cp.y - pt.y) * (cp.y - pt.y);\n\n                if (dist == null || tmp < dist) {\n                  nearestConstraint = constraints[i];\n                  dist = tmp;\n                }\n              }\n            }\n\n            if (nearestConstraint != null) {\n              this.sourceConstraint = nearestConstraint;\n            }\n\n            // In case the edge style must be changed during the preview:\n            // this.edgeState.style['edgeStyle'] = 'orthogonalEdgeStyle';\n            // And to use the new edge style in the new edge inserted into the graph,\n            // update the cell style as follows:\n            //this.edgeState.cell.style = mxUtils.setStyle(this.edgeState.cell.style, 'edgeStyle', this.edgeState.style['edgeStyle']);\n          }\n\n          mxConnectionHandlerUpdateEdgeState.apply(this, arguments);\n        };\n        // Creates the graph inside the given container\n        var graph = new mxGraph(container);\n        graph.setConnectable(true);\n\n        if (graph.connectionHandler.connectImage == null) {\n          graph.connectionHandler.isConnectableCell = function(cell) {\n            return false;\n          };\n          mxEdgeHandler.prototype.isConnectableCell = function(cell) {\n            return graph.connectionHandler.isConnectableCell(cell);\n          };\n        }\n\n        graph.getAllConnectionConstraints = function(terminal) {\n          if (terminal != null && this.model.isVertex(terminal.cell)) {\n            return [\n              new mxConnectionConstraint(new mxPoint(0, 0), true),\n              new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n              new mxConnectionConstraint(new mxPoint(1, 0), true),\n              new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n              new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n              new mxConnectionConstraint(new mxPoint(0, 1), true),\n              new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n              new mxConnectionConstraint(new mxPoint(1, 1), true)\n            ];\n          }\n\n          return null;\n        };\n\n        // Connect preview\n        graph.connectionHandler.createEdgeState = function(me) {\n          var edge = graph.createEdge(\n            null,\n            null,\n            null,\n            null,\n            null,\n            'edgeStyle=orthogonalEdgeStyle'\n          );\n\n          return new mxCellState(\n            this.graph.view,\n            edge,\n            this.graph.getCellStyle(edge)\n          );\n        };\n\n        // Disables moving of edge labels in this examples\n        graph.edgeLabelsMovable = false;\n\n        // Enables rubberband selection\n        new mxRubberband(graph);\n\n        // Needs to set a flag to check for dynamic style changes,\n        // that is, changes to styles on cells where the style was\n        // not explicitely changed using mxStyleChange\n        graph.getView().updateStyle = true;\n\n        // Overrides mxGraphModel.getStyle to return a specific style\n        // for edges that reflects their target terminal (in this case\n        // the strokeColor will be equal to the target's fillColor).\n        var previous = graph.model.getStyle;\n\n        graph.model.getStyle = function(cell) {\n          if (cell != null) {\n            var style = previous.apply(this, arguments);\n\n            if (this.isEdge(cell)) {\n              var target = this.getTerminal(cell, false);\n\n              if (target != null) {\n                var targetStyle = graph.getCurrentCellStyle(target);\n                var fill = mxUtils.getValue(\n                  targetStyle,\n                  mxConstants.STYLE_FILLCOLOR\n                );\n\n                if (fill != null) {\n                  style += ';strokeColor=' + fill;\n                }\n              }\n            } else if (this.isVertex(cell)) {\n              var geometry = this.getGeometry(cell);\n\n              if (geometry != null && geometry.width > 80) {\n                style += ';fillColor=green';\n              }\n            }\n\n            return style;\n          }\n\n          return null;\n        };\n\n        // Gets the default parent for inserting new cells. This\n        // is normally the first child of the root (ie. layer 0).\n        var parent = graph.getDefaultParent();\n\n        // Adds cells to the model in a single step\n        graph.getModel().beginUpdate();\n        try {\n          var v1 = graph.insertVertex(\n            parent,\n            null,\n            'Hello,',\n            20,\n            20,\n            80,\n            30,\n            'fillColor=green'\n          );\n          var v2 = graph.insertVertex(\n            parent,\n            null,\n            'World!',\n            200,\n            150,\n            80,\n            30,\n            'fillColor=blue'\n          );\n          graph.insertVertex(\n            parent,\n            null,\n            'World!',\n            20,\n            150,\n            80,\n            30,\n            'fillColor=red'\n          );\n          graph.insertEdge(\n            parent,\n            null,\n            'Connect',\n            v1,\n            v2,\n            'perimeterSpacing=4;strokeWidth=4;labelBackgroundColor=white;fontStyle=1'\n          );\n          // var v1 = graph.insertVertex(\n          //   parent,\n          //   null,\n          //   'Hello,',\n          //   20,\n          //   20,\n          //   80,\n          //   60,\n          //   'shape=triangle;perimeter=trianglePerimeter'\n          // );\n          // var v2 = graph.insertVertex(\n          //   parent,\n          //   null,\n          //   'World!',\n          //   200,\n          //   150,\n          //   80,\n          //   60,\n          //   'shape=ellipse;perimeter=ellipsePerimeter'\n          // );\n          // var v3 = graph.insertVertex(parent, null, 'Hello,', 200, 20, 80, 30);\n          // var e1 = graph.insertEdge(\n          //   parent,\n          //   null,\n          //   '',\n          //   v1,\n          //   v2,\n          //   'edgeStyle=elbowEdgeStyle;elbow=horizontal;' +\n          //     'exitX=0.5;exitY=1;exitPerimeter=1;entryX=0;entryY=0;entryPerimeter=1;'\n          // );\n          // var e2 = graph.insertEdge(\n          //   parent,\n          //   null,\n          //   '',\n          //   v3,\n          //   v2,\n          //   'edgeStyle=elbowEdgeStyle;elbow=horizontal;orthogonal=0;' +\n          //     'entryX=0;entryY=0;entryPerimeter=1;'\n          // );\n        } finally {\n          // Updates the display\n          graph.getModel().endUpdate();\n        }\n      }\n    }\n  },\n  created() {},\n  mounted() {\n    const _this = this;\n    this.$nextTick(() => {\n      // console.log(this.$refs.graphIndex);\n      if (_this.$refs.graphIndex) {\n        _this.createFraphIndex(_this.createFraphIndex(_this.$refs.graphIndex));\n      }\n    });\n  },\n  beforeCreate() {},\n  beforeMount() {},\n  beforeUpdate() {},\n  updated() {},\n  beforeDestroy() {},\n  destroyed() {},\n  activated() {}\n};\n</script>\n<style lang=\"less\" scoped>\n.graph {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"sourceRoot":"src/views/mxgraph-text"}]}